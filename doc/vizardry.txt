*Vizardry*
*vizardry*
                ________________ _______ _______ ______  _______
        |\     /\__   __/ ___   (  ___  (  ____ (  __  \(  ____ |\     /|
        | )   ( |  ) (  \/   )  | (   ) | (    )| (  \  | (    )( \   / )
        | |   | |  | |      /   | (___) | (____)| |   ) | (____)|\ (_) /
        ( (   ) )  | |     /   /|  ___  |     __| |   | |     __) \   /
         \ \_/ /   | |    /   / | (   ) | (\ (  | |   ) | (\ (     ) (
          \   / ___) (___/   (_/| )   ( | ) \ \_| (__/  | ) \ \__  | |
           \_/  \_______(_______|/     \|/   \__(______/|/   \__/  \_/

                    A vim plugin manager for lazy people

===============================================================================
Table of Contents                                         *Vizardry-contents* ~

    1. Release notes...............................|Vizardry-releaseNotes|
    2. Introduction................................|Vizardry-introduction|
        2.1 Why This Fork..........................|Vizardry-fork|
        2.2 Requirements...........................|Vizardry-requirements|
        2.3 Installation...........................|Vizardry-installation|
        2.4 License................................|Vizardry-License|
    3. Submodules..................................|Vizardry-submodule|
    4. Commands....................................|Vizardry-commands|
        4.1 Scry...................................|:Scry|
            4.1.1 Nb results.......................|Vizardry-nbScryResults|
            4.1.2 Query............................|Vizardry-query|
            4.1.3 Search Options...................|Vizardry-searchOptions|
            4.1.4 Sort results.....................|Vizardry-sortScryResults|
        4.2 Invoke.................................|:Invoke|
            4.2.1 Readme Reader....................|Vizardry-readmeReader|
            4.2.2 Help Reader......................|Vizardry-helpReader|
            4.2.3 Readme Help fallback.............|Vizardry-ReadmeHelpFallback|
        4.3 Banish.................................|:Banish|
        4.4 Unbanish...............................|:Unbanish|
        4.5 Vanish.................................|:Vanish|
        4.6 Evolve.................................|:Evolve|
            4.6.1 View readme on evolve............|Vizardry-viewReadmeOnEvolve|
            4.6.2 Evolve from vim.org..............|Vizardry-evolveVim.org|
        4.7 Scry...................................|:Vizardry|
        4.8 Grimoire...............................|:Grimoire|
    5. Magic.......................................|Vizardry-Magic|
        5.1 Configuration..........................|Vizardry-MagicConfig|
        5.2 Commands...............................|Vizardry-MagicCommands|
            5.2.1 Magic............................|:Magic|
            5.2.2 MagicEdit........................|:MagicEdit|
            5.2.3 Magicsplit.......................|:Magicsplit|
            5.2.4 Magicvsplit......................|:Magicvsplit|
            5.2.5 MagicCommit......................|:MagicCommit|
    6. Spread the word ............................|Vizardry-spread|
    7. Get involved ...............................|Vizardry-getInvolved|

===============================================================================
Release notes                                         *Vizardry-releaseNotes* ~

Current Version: 2.0b3

* v2.0 comes with the possibility to search plugins from (virtually) any
  providers (github, bitbuckets,gitlab), see |:Grimoire|. It also provide a
  major refactor several minor bug fix, and remove dependencies to external
  commands (`sed`, `grep` etc.).
  It also re enables `:Magic` family commands with support for submodule mode
  see |Vizardry-Magic|.
  Important informations:~
  Helps and Readme are not read from stdin anymore but from temporary file thus
  the Reader syntax have changed see: |Vizardry-helpReader|.
* v1.4 provides several bug fix and the capability of seeing help files from
 Invoke and Evolve prompt. It also add the command `:Vizardry` to show version
 and basic usage.
* v1.3 allow to Invoke directly from Scry, to do so, I had to modify the input
  method (using `:input()`, instead of `:getchar()`), for the user the result
  is that it is now necessary to hit 'enter' after answering a prompt from
  Vizardry
* Since v1.1, `VizardrySortScryResults` is replaced by `Vizardry-searchOptions`

===============================================================================
Intoduction                                           *Vizardry-introduction* ~

Remember back in the dark ages of 2013? When you had to search for vim plugins
like a wild animal, using your browser?

In 2014, you can just type "|:Invoke| <keyword>" and Vizardry will
automatically search github for the plugin you want and install it for you.

In 2015 you can even upgrade plugins from any git repo or vim.org using
|:Evolve| |Vizardry-Upgrade|.

Why this fork ?                                                 *Vizardry-fork*

    This plugin is a fork from Ardagnir original Vizardry plugin
    (https://github.com/ardagnir/Vizardry) which adds several pretty cool
    features including:

    + |:Vanish| command to actually remove a plugin.
    + |:Evolve| command to upgrade one or every plugins.
    + Complete submodule handling for people having their vim config in a git repo
    (see |Vizardry-submodules|).
    + Display README.md file inside vim while using |:Invoke|
    + Navigate through search results with |:Invoke|
    + Search for plugins written by a specific user
    + Set the length of |:Scry| results list.
    + Go directly from |:Scry| to |:Invoke|
    + Automatically call |:Helptags| every time a plugin is Invoked.

Requirements                                            *Vizardry-requirements*

    + Vizardry requires |pathogen| https://github.com/tpope/vim-pathogen. But
    you already have pathogen installed, don't you?

    + It also needs git, curl, and basic \*nix commands.

    + You will probably have issues if you use a Windows OS.

Installation                                            *Vizardry-Installation*

    Use pathogen.
>
        cd ~/.vim/bundle
        git clone https://github.com/dbeniamine/vizardry
<
License                                                      *Vizardry-License*

    Vizardry is licensed under the AGPL v3
    Author: David Beniamine

===============================================================================
How to use Vizardry with submodules ?                  *Vizardry-submodules* ~

Set the following variables in your vimrc:
>
    let g:VizardryGitMethod="submodule add"
    let g:VizardryGitBaseDir="/path/to/your/git/repo"
    let g:VizardryMagicDir=g:VizardryGitBaseDir.'/vim/plugin/magic'
<

The second variable ** must be** the root of the repo containing your vim
files.

The third is the path to your `Magic` configuration files see |:Magic|, it MUST
be set even if you don't use |:Magic| command family or you will have error
messages on every commands from `:Banish` family.

Optionally you can set the vim commit messages (the name of the modified
plugin will always be happened in the end of the message, the proposed values
are the defaults):

>
    let g:VizardryCommitMsgs={'Invoke': "[Vizardry] Invoked vim submodule:",
          \'Banish': "[Vizardry] Banished vim submodule:",
          \'Vanish': "[Vizardry] Vanished vim submodule:",
          \'Evolve': "[Vizardry] Evolved vim submodule:",
          \}

<

Each time you |:Invoke|, |:Bannish| or |:Vanish| a module, the submodule will
be correctly updated and a minimal commit will be created.

Notes:

+ Commits created by Vizardry are not automatically pushed.
+ The `.gitmodule` file is included in each commit, do not use |:Invoke|,
|:Bannish| or |:Vanish| if it contains some bad modifications.

===============================================================================
Vizardry Commands                                         *Vizardry-commands* ~


:Scry [<query>]                                                         *:Scry*


    + If no <query> is given, list all invoked and banished plugins.
    + If a <query> is specified (see |Vizardry-query|), search github for a
    script matching <query> in title or readme and list N first results.
    After the search, Ì€`Scry` will prompt you to `Invoke` a script, hit `q` to
    exit, or a number to `Invoke` the corresponding script.


    The number of results displayed can be configured by adding the following
    to your vimrc:
                                                       *Vizardry-nbScryResults*
>
        let g:VizardryNbScryResults = 25
<
    Default is 10.

    A <query> can be:                                          *Vizardry-query*
        + One or several <keywords>
        + A query matching the github search api (see
          https://developer.github.com/v3/search/#search-repositories)
        + -u <user> (search every repositories of <user> matching 'vim'
        + One or several <keywords> and -u <user> (in any order)

                                                       *Vizardry-searchOptions*
    It is possible to set some github search option in your vimrc, default
    options are show forked repositories and sort by pertinence. These options
    can be overwritten. For instance adding the following to your vimrc will
    make vizardry show results sorted by number of stars hidding forked
    repositries.

        let g:VizardrySearchOptions="fork:false+sort:stars"

    Any combination of github option can be used, a `+` must appear between
    each options. For the sort option, available parameters are `stars`,
    `forks`, `updated`, by default, it show the best match.

                                                     *Vizardry-sortScryResults*

    Since v1.1, `VizardrySortScryResults` is replaced by |Vizardry-searchOptions|


:Invoke [<query>|N]                                                   *:Invoke*

        + If no arguments is specified, reload your plugins.
        + If the argument is a number, ask to install the plugin with that
            number from the last |:Scry| or Invoke.
        + If the argument is a <query>, search github for a plugin matching
        <query> (see |Vizardry-query|)  and ask for install, the sort criteria
        for search results can be configured see |Vizardry-sortSearchResults|.

    Suppose you're in the middle of vimming and you have a sudden need to surround
    random words in "scare quotes". You can't remember who made the surround
    plugin, or whether it's called surround.vim, vim-surround or
    vim-surround-plugin. Most importantly, you're lazy.

    Just type:

>
        :Invoke surround
<
    Vizardry will pop up a prompt saying:
>
        Result 1/20 tpope/vim-surround
        (surround.vim: quoting/parenthesizing made simple)

        Clone as "surround"? (Yes/Rename/Displayreadme/displayHelp/Next/Previous/Abort)
<
    Press Y and you can immediately start surrounding things.  You can also
    take a look at the README.md directly in vim by hitting `d` or at the help
    using `h`, Go to the next or previous script with `n` and `p` or abort
    `a`. It's that easy.

    Even plugins with vague or silly names can be found with Vizardry. Imagine
    you're running multiple instances of vim and need a package to sync
    registers. Type:
>
        :Invoke sync registers
<
    Vizardry will prompt you with:
>
        Result 1/3 ardagnir/united-front
        (Automatically syncs registers between vim instances)

        Clone as "syncregisters"? (Yes/Rename/DisplayMore/Next/Previous/Abort)
<
    Just as easy.

                                                        *Vizardry-readmeReader*
    To view the readme, an other instance of vim is called, the command line
    can be configured:
>
        let g:VizardryReadmeReader='view -c "set ft=markdown"'
<
                                                          *Vizardry-helpReader*
    The help file reader is also configurable, there is the default:

>
        let g:VizardryHelpReader='view -c "set ft=help"'

Note:~
 Since v2.0, the `-` in the end of the reader line is not required anymore,
 please update your configuration accordingly.


<
                                                  *Vizardry-ReadmeHelpFallback*
    Finally if readme or help is missing, Vizardry will try to search for the
    other one, if you dont like this behavior, you can prevent it:
>
        let g:VizardryReadmeHelpFallback = 0
<

:Banish <keyword>                                                     *:Banish*

    Banish a plugin, this only forbid pathogen to load it and does not remove
    the files. You need to restart vim to see the effects.

:Unbanish <keyword>                                                 *:Unbanish*

    Reverse a banish.

:Vanish <keyword>                                                     *:Vanish*

        Remove definitively a plugin's files.

:Evolve  [<keyword> [<branch>]]                                       *:Evolve*

    Upgrade the plugin matching <keyword> using remote branch <branch> if
    specified.
    If no <keyword> is given, upgrade all possible plugins.

    Git plugins are upgraded by doing `git pull origin branch`. Where
    `branch` the one specified in argument if any or the current branch of the
    local repository.  If `branch` is different from the current branch,
    Vizardry will first create or checkout a local branch with the same name
    as the remote branch requested.

                                                  *Vizardry-viewReadmeOnEvolve*
    Sometimes it can be a good idea to take a quick look at a plugin's README,
    help or git log when updating, to do so, add the following to your vimrc:
>
        let g:VizardryViewReadmeOnEvolve=1
<

    `:Evolve` will then ask you to display readme, help or log each time a
    plugin is upgraded.

                                                       *Vizardry-evolveVim.org*
    Evolving directly from vim.org is deprecated.~

    To install plugin found at vim.org from github use:
>
        :Invoke -u vim-scripts <plugin-name>
<
    Were `<plugin-name>` is the actual name of the plugin at vim.org

    You can also search a plugin by vim.org id:
>
        :Invoke -u vim-scripts in:readme script_id=<id>
<

                                                                    *:Vizardry*
:Vizardry

    Show a basic usage and Vizardry version.


                                                                    *:Grimoire*
:Grimoire <provider>

Select the `Grimoire` from which you want to `Scry` and `Invoke` bundles. A
grimoire is a website from which you can search for bundles such as github or
bitbucked.

It is also possible to set the default grimoire in your vimrc

    let g:VizardryDefaultGrimoire='github'

Help wanted:~
Currently only github is available, but it is very easy to add a new Grimoire,
see https://github.com/dbeniamine/vizardry/issues/3.


===============================================================================
Vizardry Magic                                               *Vizardry-Magic* ~

Vizardry Magic is a simple way to handle plugin specific configurations files,
these files will be Banished, Unbanished and Vanished with the bundle they
belong to.

                                                         *Vizardry-MagicConfig*
By default, these files are stored in `bunde/vizardry/plugin/magic`, this path
ensure that removing Vizardry will remove the magic files. As it is not
always a good idea to keep modified files in a subdirectory of an existing
bundle, this pas can be modified (and must be modified for submodule mode
|Vizardry-submodule|). A good idea can be to keep them in `~/.vim/plugin/magic`:
>
    let g:VizardryMagicDir='~/.vim/plugin/magic'
<

                                                       *Vizardry-MagicCommands*

:Magic <bundle> <command>                                              *:Magic*

    Adds <command> to <bundle> magic file and execute it

:MagicEdit <bundle>                                                *:MagicEdit*

    Edit magic file for <bundle>

:Magicsplit <bundle>                                              *:Magicsplit*

    Edit magic file for <bundle>, splitting the current window

:Magicvsplit <bundle>                                              *:Magicvsplit*

    Edit magic file for <bundle>, vsplitting the current window

:MagicCommit <file>                                              *:MagicCommit*

    For submodule (see |Vizardry-submodule|) mode only: Commit the changes to
    the given magic file.

    Does nothing in clone mode

===============================================================================
Spread the word                                             *Vizardry-spread* ~

If you like Vizardry and you are also a vimscript developper, an easy way to
spread the word is to add a Vizardry install section to your plugins README
for instance:

If you have installed [Vizardry](https://github.com/dbeniamine/vizardry) just
run the following from vim:
>
    :Invoke -u <your_username> <your_plugin_name>
<
===============================================================================
Get Involved                                           *Vizardry-GetInvolved* ~

If you like Vizardry and want to help, you can look add `vizardry/todo.txt`
see what I improvement I'm planning to add to Vizardry.
If you are going to modify Vizardry code, please take a look at |Vizardry-Dev|
before writing any code.
Feel free to open pull requests when you are done :).

